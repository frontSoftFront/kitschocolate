import * as R from 'ramda';
import { createSlice, createSelector } from '@reduxjs/toolkit';
// //////////////////////////////////////////////////

const initialState = {
  total: 0,
  basketList: {}
};

export const basketSlice = createSlice({
  initialState,
  name: 'basket',
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setBasket: (state, { payload }) => {
      return {
        ...state,
        basketList: payload
      };
    },
    addItemToBasket: (state, { payload }) => {
      const { basketList } = state;

      const { id, price } = payload;

      let newBasketList = payload;

      if (R.has(id, basketList)) {
        const quantity = R.add(
          payload.quantity,
          R.path([id, 'quantity'], basketList)
        );

        const subtotal = R.multiply(quantity, price);
        const newItem = R.merge(payload, { quantity, subtotal });

        newBasketList = R.assoc(id, newItem, basketList);
      } else {
        const subtotal = R.multiply(payload.quantity, price);
        const newItem = R.assoc('subtotal', subtotal, payload);

        newBasketList = R.assoc(id, newItem, basketList);
      }

      return { ...state, basketList: newBasketList };
    },
    removeItemFromBasket: (state, payload) => {
      const { basketList } = state;

      const { id, price } = payload;

      const quantity = R.path([id, 'quantity'], basketList);

      if (R.equals(quantity, 1)) {
        return { ...state, basketList: R.dissoc(id, basketList) };
      }

      const newItem = {
        ...R.prop(id, basketList),
        quantity: R.dec(quantity),
        subtotal: R.multiply(R.dec(quantity), price)
      };

      return { ...state, basketList: R.assoc(id, newItem, basketList) };
    }
    // increment: state => {
    //   // Redux Toolkit allows us to write "mutating" logic in reducers. It
    //   // doesn't actually mutate the state because it uses the Immer library,
    //   // which detects changes to a "draft state" and produces a brand new
    //   // immutable state based off those changes
    //   state.value += 1;
    // },
    // decrement: state => {
    //   state.value -= 1;
    // },
    // // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action) => {
    //   state.value += action.payload;
    // }
  }
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: builder => {
  //   builder
  //     .addCase(incrementAsync.pending, state => {
  //       state.status = 'loading';
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.value += action.payload;
  //     });
  // }
});

const {
  setBasket,
  addItemToBasket,
  removeItemFromBasket
} = basketSlice.actions;

export const basketActions = {
  setBasket,
  addItemToBasket,
  removeItemFromBasket
};

export const makeSelectBasket = createSelector(
  ({ basket }) => basket,
  ({ basketList }) => {
    let basketCount = R.compose(
      R.sum,
      R.map(R.prop('quantity')),
      R.values
    )(basketList);

    if (R.gt(basketCount, 100)) basketCount = 100;

    return { basketList, basketCount };
  }
);
